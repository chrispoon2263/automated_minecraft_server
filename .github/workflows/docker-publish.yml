name: Test and Push Minecraft Server

on:
  push:
    branches:
      - main

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # # Test & deploy dockerimage to Docker Hub
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build Minecraft Docker image
      #   run: docker build -t minecraft-server ./docker

      # - name: Run Minecraft server container
      #   run: |
      #     docker run -d --name mc-server-test -p 25565:25565 minecraft-server
      #     sleep 10  # wait for server to fully start

      # - name: Install nmap
      #   run: sudo apt-get update && sudo apt-get install -y nmap

      # - name: Test port 25565 with nmap
      #   run: |
      #     nmap -p 25565 localhost | grep "25565/tcp open" || (echo "Port 25565 not open!" && exit 1)

      # - name: Push to Docker Hub (if test passed)
      #   run: |
      #     docker tag minecraft-server ${{ secrets.DOCKERHUB_USERNAME }}/minecraft-server:latest
      #     docker push ${{ secrets.DOCKERHUB_USERNAME }}/minecraft-server:latest

      # Terraform test and deploy EC2 instance
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
      
      - name: Get EC2 Public IP from Terraform
        id: get_ip
        run: |
          cd terraform
          IP=$(terraform output -raw instance_public_ip | tr -d '\r\n')
          echo "ip=$IP" >> $GITHUB_OUTPUT 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
      
      - name: Print EC2 IP
        run: echo "EC2 IP is ${{ steps.get_ip.outputs.ip }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}

      # Destroy Runner when done
      - name: Cleanup container
        if: always()
        run: |
          # docker stop mc-server-test || true
          # docker rm mc-server-test || true
          cd terraform
          terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
